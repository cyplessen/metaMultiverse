% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/create_principled_multiverse_specifications.R
\name{create_principled_multiverse_specifications}
\alias{create_principled_multiverse_specifications}
\title{Create Specifications for Multiverse Meta-Analysis}
\usage{
create_principled_multiverse_specifications(
  data,
  wf_vars,
  ma_methods,
  dependencies,
  decision_map
)
}
\arguments{
\item{data}{A data frame containing the dataset to base the specifications on.
Must be previously validated using \code{check_data_multiverse()}.}

\item{wf_vars}{A character vector specifying the "Which factors" (e.g., columns like \code{wf_1}, \code{wf_2}) to include in the specifications.}

\item{ma_methods}{A character vector specifying the meta-analytic methods to consider (e.g., \code{"reml"}, \code{"fe"}, \code{"3-level"}, \code{"rve"}, \code{"p-uniform"}, etc.).}

\item{dependencies}{A character vector specifying dependency handling strategies to include (e.g., \code{"modeled"}, \code{"aggregate"}).}

\item{decision_map}{A named character vector or list mapping each wf_var to a decision type:
\itemize{
  \item \code{"E"} (Equivalent): Different levels are theoretically equivalent -
        creates multiverse with individual levels + "total_wf_X" option
  \item \code{"U"} (Uncertain): Unclear which level is best -
        creates multiverse with individual levels + "total_wf_X" option
  \item \code{"N"} (Non-equivalent): Different levels represent distinct research questions -
        creates separate multiverse analyses (different multiverse_id values)
}}
}
\value{
A list with two elements:
\itemize{
  \item \code{specifications}: A data frame where each row represents one analysis specification.
        Contains columns for each wf_var, plus \code{dependency}, \code{ma_method},
        \code{multiverse_id}, and \code{row_id}.
  \item \code{number_specs}: Integer. The total number of valid specifications created.
}
}
\description{
This function generates a grid of specifications for multiverse meta-analysis based on "Which" and "How" factors.
It ensures only valid combinations of meta-analytic methods and dependency handling strategies are included.
Data must be validated using \code{check_data_multiverse()} before using this function.
}
\details{
The function performs the following steps:
\itemize{
  \item Identifies all unique values for each "Which factor" in the dataset.
  \item For "E" and "U" factors: Appends a "total" value (e.g., \code{total_wf_1}) to allow for combinations that include all levels.
  \item For "N" factors: Uses only the raw levels (no "total" option) and creates separate multiverse_id values.
  \item Dynamically creates a grid of all possible combinations of "Which factors," meta-analytic methods (\code{ma_methods}), and dependency strategies (\code{dependencies}).
  \item Filters out invalid combinations based on the method registry (e.g., some methods only work with specific dependencies).
  \item Adds a unique row ID to each specification.
}
}
\section{Multiverse ID Logic}{

The \code{multiverse_id} column groups specifications into separate multiverse analyses:
\itemize{
  \item Variables with decision_map = "N" create separate \code{multiverse_id} values
  \item Variables with decision_map = "E" or "U" vary within each multiverse
  \item Use \code{multiverse_id} to split results into separate analyses or plots
}
}

\examples{
# Example dataset
example_data <- data.frame(
  study = paste0("Study_", 1:6),
  es_id = 1:6,
  yi = c(0.3, 0.5, 0.7, 0.2, 0.6, 0.4),
  vi = c(0.02, 0.03, 0.01, 0.04, 0.02, 0.03),
  wf_1 = c("A", "B", "A", "C", "B", "C"),  # Population type (Non-equivalent)
  wf_2 = c("X", "Y", "X", "Y", "X", "Y")   # Measure type (Uncertain)
)

# First validate the data
validated_data <- check_data_multiverse(example_data)

# Decision map: wf_1 creates separate analyses, wf_2 creates multiverse options
decision_map <- c("wf_1" = "N", "wf_2" = "U")

# Create specifications
specs <- create_principled_multiverse_specifications(
  data = validated_data,
  wf_vars = c("wf_1", "wf_2"),
  ma_methods = c("reml", "fe"),
  dependencies = c("aggregate"),
  decision_map = decision_map
)

# Results: Multiple multiverse_id values for different wf_1 levels
table(specs$specifications$multiverse_id)
head(specs$specifications)

}
