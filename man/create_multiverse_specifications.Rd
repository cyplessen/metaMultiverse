% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/create_multiverse_specifications.R
\name{create_multiverse_specifications}
\alias{create_multiverse_specifications}
\title{Create Multiverse Specifications}
\usage{
create_multiverse_specifications(
  factor_setup,
  ma_methods = NULL,
  dependencies = c("aggregate", "modeled")
)
}
\arguments{
\item{factor_setup}{Output from \code{\link{define_factors}} containing
factor definitions, decision types, and optional custom groupings}

\item{ma_methods}{Character vector of meta-analytic methods.
Default: NULL (uses all available methods)}

\item{dependencies}{Character vector of dependency handling strategies.
Default: c("aggregate", "modeled")}
}
\value{
List containing:
\describe{
  \item{specifications}{Data frame where each row is one analysis specification with:
    \itemize{
      \item Which factor columns (wf_*) with levels or group names
      \item \code{ma_method}: Meta-analytic method to apply
      \item \code{dependency}: Dependency handling strategy
      \item \code{multiverse_id}: Identifier for separate multiverses (from N-type factors)
      \item \code{row_id}: Unique specification identifier
    }
  }
  \item{number_specs}{Total number of specifications generated}
  \item{factor_setup}{Original factor setup (preserved for downstream use)}
}
}
\description{
Generates a grid of analysis specifications from factor definitions.
Each specification represents one unique combination of study selection
criteria, meta-analytic method, and dependency handling approach.
}
\details{
Specification generation follows these rules:
\itemize{
  \item \strong{E/U factors}: Create options for each level plus "total_*" (all combined)
  \item \strong{N factors}: Create separate multiverses for each level (no combinations)
  \item \strong{Custom groups}: Use group names instead of raw data levels
  \item \strong{Valid combinations}: Only includes method-dependency pairs that are compatible
}

Available methods retrieved via \code{\link{list_ma_methods}}.
Invalid method-dependency combinations are automatically filtered out.
}
\examples{
\dontrun{
# Basic usage with defaults
specs <- setup \%>\%
  create_multiverse_specifications()

# Specific methods only
specs <- setup \%>\%
  create_multiverse_specifications(
    ma_methods = c("reml", "fe", "pet-peese"),
    dependencies = "aggregate"
  )

# Pipeline usage
results <- data \%>\%
  check_data_multiverse() \%>\%
  define_factors(
    Population = "pop_type|E",
    Quality = "quality|N"
  ) \%>\%
  create_multiverse_specifications() \%>\%
  run_multiverse_analysis()
}

}
\seealso{
\code{\link{define_factors}} for factor setup
\code{\link{list_ma_methods}} for available methods
\code{\link{run_multiverse_analysis}} for executing specifications
}
